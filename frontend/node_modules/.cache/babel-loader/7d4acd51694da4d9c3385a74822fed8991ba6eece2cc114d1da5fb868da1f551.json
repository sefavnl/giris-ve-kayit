{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000/api';\n\n// Create an axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Auth services\nexport const authService = {\n  // Register a new user\n  register: async userData => {\n    try {\n      const response = await api.post('/register', userData);\n      return response.data;\n    } catch (error) {\n      throw error.response ? error.response.data : error;\n    }\n  },\n  // Login a user and get token\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/login', {\n        email,\n        password\n      });\n      if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n      }\n      return response.data;\n    } catch (error) {\n      throw error.response ? error.response.data : error;\n    }\n  },\n  // Logout the user\n  logout: () => {\n    localStorage.removeItem('token');\n  },\n  // Get current user's info\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/users/me');\n      return response.data;\n    } catch (error) {\n      throw error.response ? error.response.data : error;\n    }\n  },\n  // Check if user is logged in\n  isLoggedIn: () => {\n    return !!localStorage.getItem('token');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","authService","register","userData","response","post","data","login","email","password","access_token","setItem","logout","removeItem","getCurrentUser","get","isLoggedIn"],"sources":["C:/Users/SEFA/Desktop/Yeni klasÃ¶r (5)/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8000/api';\r\n\r\n// Create an axios instance\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor to add the auth token to requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth services\r\nexport const authService = {\r\n  // Register a new user\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post('/register', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response ? error.response.data : error;\r\n    }\r\n  },\r\n\r\n  // Login a user and get token\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('/login', { email, password });\r\n      if (response.data.access_token) {\r\n        localStorage.setItem('token', response.data.access_token);\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response ? error.response.data : error;\r\n    }\r\n  },\r\n\r\n  // Logout the user\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n  },\r\n\r\n  // Get current user's info\r\n  getCurrentUser: async () => {\r\n    try {\r\n      const response = await api.get('/users/me');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response ? error.response.data : error;\r\n    }\r\n  },\r\n\r\n  // Check if user is logged in\r\n  isLoggedIn: () => {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG;EACzB;EACAC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,IAAI,CAAC,WAAW,EAAEF,QAAQ,CAAC;MACtD,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd,MAAMA,KAAK,CAACM,QAAQ,GAAGN,KAAK,CAACM,QAAQ,CAACE,IAAI,GAAGR,KAAK;IACpD;EACF,CAAC;EAED;EACAS,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,IAAI,CAAC,QAAQ,EAAE;QAAEG,KAAK;QAAEC;MAAS,CAAC,CAAC;MAC9D,IAAIL,QAAQ,CAACE,IAAI,CAACI,YAAY,EAAE;QAC9Bd,YAAY,CAACe,OAAO,CAAC,OAAO,EAAEP,QAAQ,CAACE,IAAI,CAACI,YAAY,CAAC;MAC3D;MACA,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd,MAAMA,KAAK,CAACM,QAAQ,GAAGN,KAAK,CAACM,QAAQ,CAACE,IAAI,GAAGR,KAAK;IACpD;EACF,CAAC;EAED;EACAc,MAAM,EAAEA,CAAA,KAAM;IACZhB,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED;EACAC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMjB,GAAG,CAAC4B,GAAG,CAAC,WAAW,CAAC;MAC3C,OAAOX,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd,MAAMA,KAAK,CAACM,QAAQ,GAAGN,KAAK,CAACM,QAAQ,CAACE,IAAI,GAAGR,KAAK;IACpD;EACF,CAAC;EAED;EACAkB,UAAU,EAAEA,CAAA,KAAM;IAChB,OAAO,CAAC,CAACpB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC;AACF,CAAC;AAED,eAAeV,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}