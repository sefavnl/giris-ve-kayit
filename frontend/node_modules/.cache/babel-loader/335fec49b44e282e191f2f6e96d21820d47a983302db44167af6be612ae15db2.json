{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SEFA\\\\Desktop\\\\Yeni klas\\xF6r (5)\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authService } from '../services/api';\n\n// Create the auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user on initial render if token exists\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        if (authService.isLoggedIn()) {\n          const userData = await authService.getCurrentUser();\n          setUser(userData);\n        }\n      } catch (err) {\n        console.error('Failed to load user:', err);\n        authService.logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n\n  // Register a new user\n  const register = async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await authService.register(userData);\n      return response;\n    } catch (err) {\n      setError(err.detail || 'Registration failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login a user\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      await authService.login(email, password);\n      const userData = await authService.getCurrentUser();\n      setUser(userData);\n    } catch (err) {\n      setError(err.detail || 'Login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout the user\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n  };\n\n  // Auth context value\n  const value = {\n    user,\n    loading,\n    error,\n    register,\n    login,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","loadUser","isLoggedIn","userData","getCurrentUser","err","console","logout","register","response","detail","login","email","password","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/SEFA/Desktop/Yeni klasÃ¶r (5)/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { authService } from '../services/api';\r\n\r\n// Create the auth context\r\nconst AuthContext = createContext();\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Load user on initial render if token exists\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      try {\r\n        if (authService.isLoggedIn()) {\r\n          const userData = await authService.getCurrentUser();\r\n          setUser(userData);\r\n        }\r\n      } catch (err) {\r\n        console.error('Failed to load user:', err);\r\n        authService.logout();\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadUser();\r\n  }, []);\r\n\r\n  // Register a new user\r\n  const register = async (userData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await authService.register(userData);\r\n      return response;\r\n    } catch (err) {\r\n      setError(err.detail || 'Registration failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Login a user\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      await authService.login(email, password);\r\n      const userData = await authService.getCurrentUser();\r\n      setUser(userData);\r\n    } catch (err) {\r\n      setError(err.detail || 'Login failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout the user\r\n  const logout = () => {\r\n    authService.logout();\r\n    setUser(null);\r\n  };\r\n\r\n  // Auth context value\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    register,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,WAAW,QAAQ,iBAAiB;;AAE7C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAE,SAAS,CAAC,MAAM;IACd,MAAMc,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,IAAIb,WAAW,CAACc,UAAU,CAAC,CAAC,EAAE;UAC5B,MAAMC,QAAQ,GAAG,MAAMf,WAAW,CAACgB,cAAc,CAAC,CAAC;UACnDR,OAAO,CAACO,QAAQ,CAAC;QACnB;MACF,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZC,OAAO,CAACP,KAAK,CAAC,sBAAsB,EAAEM,GAAG,CAAC;QAC1CjB,WAAW,CAACmB,MAAM,CAAC,CAAC;MACtB,CAAC,SAAS;QACRT,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMO,QAAQ,GAAG,MAAOL,QAAQ,IAAK;IACnCL,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMrB,WAAW,CAACoB,QAAQ,CAACL,QAAQ,CAAC;MACrD,OAAOM,QAAQ;IACjB,CAAC,CAAC,OAAOJ,GAAG,EAAE;MACZL,QAAQ,CAACK,GAAG,CAACK,MAAM,IAAI,qBAAqB,CAAC;MAC7C,MAAML,GAAG;IACX,CAAC,SAAS;MACRP,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMa,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvCf,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMZ,WAAW,CAACuB,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC;MACxC,MAAMV,QAAQ,GAAG,MAAMf,WAAW,CAACgB,cAAc,CAAC,CAAC;MACnDR,OAAO,CAACO,QAAQ,CAAC;IACnB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZL,QAAQ,CAACK,GAAG,CAACK,MAAM,IAAI,cAAc,CAAC;MACtC,MAAML,GAAG;IACX,CAAC,SAAS;MACRP,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMS,MAAM,GAAGA,CAAA,KAAM;IACnBnB,WAAW,CAACmB,MAAM,CAAC,CAAC;IACpBX,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;;EAED;EACA,MAAMkB,KAAK,GAAG;IACZnB,IAAI;IACJE,OAAO;IACPE,KAAK;IACLS,QAAQ;IACRG,KAAK;IACLJ,MAAM;IACNQ,eAAe,EAAE,CAAC,CAACpB;EACrB,CAAC;EAED,oBAAOL,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAArB,QAAA,EAAEA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;;AAED;AAAA1B,EAAA,CA3EaF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AA4EzB,OAAO,MAAM8B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGtC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACiC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAQpB,eAAe/B,WAAW;AAAC,IAAA8B,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}